#tag Class
Protected Class PreferenceClass
	#tag Method, Flags = &h21
		Private Sub LoadPreferences(PreferenceFileContents as String)
		  // Load General Preferences: Theme Layout
		  Dim ThemeLayout_RegEx as RegEx
		  Dim ThemeLayout_RegExMatch as RegExMatch
		  Dim ThemeLayout_Value as String
		  ThemeLayout_RegEx = New RegEx
		  ThemeLayout_RegEx.Options.Greedy = False
		  ThemeLayout_RegEx.Options.caseSensitive = false
		  ThemeLayout_RegEx.SearchPattern = "(?<=ThemeLayout=).+(?=;)"
		  ThemeLayout_RegExMatch = ThemeLayout_RegEx.Search(PreferenceFileContents)
		  if ThemeLayout_RegExMatch <> nil then
		    ThemeLayout_Value = ThemeLayout_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Load General Preferences: Appearance Style
		  Dim AppearanceStyle_RegEx as RegEx
		  Dim AppearanceStyle_RegExMatch as RegExMatch
		  Dim AppearanceStyle_Value as String
		  AppearanceStyle_RegEx = New RegEx
		  AppearanceStyle_RegEx.Options.Greedy = False
		  AppearanceStyle_RegEx.Options.caseSensitive = false
		  AppearanceStyle_RegEx.SearchPattern = "(?<=AppearanceStyle=).+(?=;)"
		  AppearanceStyle_RegExMatch = AppearanceStyle_RegEx.Search(PreferenceFileContents)
		  if AppearanceStyle_RegExMatch <> nil then
		    AppearanceStyle_Value = AppearanceStyle_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Load General Preferences: Appearance Style
		  Dim CalcWindowTransparency_RegEx as RegEx
		  Dim CalcWindowTransparency_RegExMatch as RegExMatch
		  Dim CalcWindowTransparency_Value as String
		  CalcWindowTransparency_RegEx = New RegEx
		  CalcWindowTransparency_RegEx.Options.Greedy = False
		  CalcWindowTransparency_RegEx.Options.caseSensitive = false
		  CalcWindowTransparency_RegEx.SearchPattern = "(?<=CalculatorWindowTransparency=).+(?=;)"
		  CalcWindowTransparency_RegExMatch = CalcWindowTransparency_RegEx.Search(PreferenceFileContents)
		  if CalcWindowTransparency_RegExMatch <> nil then
		    CalcWindowTransparency_Value = CalcWindowTransparency_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Load Software Preferences: Check for Version Upgrade Frequency
		  Dim CheckForVersionUpgradeFreq_RegEx as RegEx
		  Dim CheckForVersionUpgradeFreq_RegExMatch as RegExMatch
		  Dim CheckForVersionUpgradeFreq_Value as String
		  CheckForVersionUpgradeFreq_RegEx = New RegEx
		  CheckForVersionUpgradeFreq_RegEx.Options.Greedy = False
		  CheckForVersionUpgradeFreq_RegEx.Options.caseSensitive = false
		  CheckForVersionUpgradeFreq_RegEx.SearchPattern = "(?<=CheckForVersionUpdateFreq=).+(?=;)"
		  CheckForVersionUpgradeFreq_RegExMatch = CheckForVersionUpgradeFreq_RegEx.Search(PreferenceFileContents)
		  if CheckForVersionUpgradeFreq_RegExMatch <> nil then
		    CheckForVersionUpgradeFreq_Value = CheckForVersionUpgradeFreq_RegExMatch.SubExpressionString(0)
		    VersionUpgradeFreqSettingFromPref_File = CheckForVersionUpgradeFreq_Value
		  end if
		  
		  // Load Software Preferences: Date Last Checked for Version Upgrades
		  Dim DateLastCheckedForVersionUpgrade_RegEx as RegEx
		  Dim DateLastCheckedForVersionUpgrade_RegExMatch as RegExMatch
		  Dim DateLastCheckedForVersionUpgrade_Value as String
		  DateLastCheckedForVersionUpgrade_RegEx = New RegEx
		  DateLastCheckedForVersionUpgrade_RegEx.Options.Greedy = False
		  DateLastCheckedForVersionUpgrade_RegEx.Options.caseSensitive = false
		  DateLastCheckedForVersionUpgrade_RegEx.SearchPattern = "(?<=DateLastCheckedForVersion=).+(?=;)"
		  DateLastCheckedForVersionUpgrade_RegExMatch = DateLastCheckedForVersionUpgrade_RegEx.Search(PreferenceFileContents)
		  if DateLastCheckedForVersionUpgrade_RegExMatch <> nil then
		    DateLastCheckedForVersionUpgrade_Value = DateLastCheckedForVersionUpgrade_RegExMatch.SubExpressionString(0)
		    DateLastCheckedForVerUpgradeString = DateLastCheckedForVersionUpgrade_Value
		  end if
		  
		  // Load Software Preferences: Upgrade Installation Method
		  Dim UpgradeInstallationMethod_RegEx as RegEx
		  Dim UpgradeInstallationMethod_RegExMatch as RegExMatch
		  Dim UpgradeInstallationMethod_Value as String
		  UpgradeInstallationMethod_RegEx = New RegEx
		  UpgradeInstallationMethod_RegEx.Options.Greedy = False
		  UpgradeInstallationMethod_RegEx.Options.caseSensitive = false
		  UpgradeInstallationMethod_RegEx.SearchPattern = "(?<=UpgradeInstallationMethod=).+(?=;)"
		  UpgradeInstallationMethod_RegExMatch = UpgradeInstallationMethod_RegEx.Search(PreferenceFileContents)
		  if UpgradeInstallationMethod_RegExMatch <> nil then
		    UpgradeInstallationMethod_Value = UpgradeInstallationMethod_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Map Loaded Preference Values back to the Preference Window Popup Menus etc.
		  Update_ThemeLayout_Menu(ThemeLayout_Value)
		  Update_AppearanceStyle_Menu(AppearanceStyle_Value)
		  Update_CalculatorWindowTransparency_Menu(CalcWindowTransparency_Value)
		  Update_CheckForVersionUpgradeFreq(CheckForVersionUpgradeFreq_Value)
		  Update_DateLastCheckedForVersionUpgrade(DateLastCheckedForVersionUpgrade_Value)
		  Update_UpgradeInstallationMethod(UpgradeInstallationMethod_Value)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub mChangeViewModes(Mode as String)
		  // Change on the Fly: Normal Mode vs. Tiny Mode
		  if Mode = "Tiny View" Then
		    MainWindow.Hide
		    TinyViewWindow.Show
		  Elseif Mode = "Normal View" Then
		    TinyViewWindow.Hide
		    MainWindow.Show
		  end if
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub mCreatePreferencesFileFormat(TOS as TextOutputStream, PreferenceFolder as FolderItem)
		  TOS = TextOutputStream.Create(PreferenceFolder)
		  TOS.Write("ThemeLayout=Green;" + EndOfLine)
		  TOS.Write("AppearanceStyle=Normal;"+ EndOfLine)
		  TOS.Write("CalculatorWindowTransparency=0;"+ EndOfLine)
		  TOS.Write("CheckForVersionUpdateFreq=Daily;"+EndOfLine)
		  TOS.Write("DateLastCheckedForVersion=1/1/80;"+EndOfLine)
		  #IF TargetMacOS Then
		    TOS.Write("UpgradeInstallationMethod=Auto install;"+EndOfLine)
		  #ELSEIF TargetWin32 Then
		    TOS.Write("UpgradeInstallationMethod=Manual install;"+EndOfLine)
		  #ENDIF
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub mInitializePreferences()
		  Dim PreferenceFolder As FolderItem
		  Dim TIS as TextInputStream
		  Dim TOS as TextOutputStream
		  Dim PreferenceFileContents as String
		  
		  // Create Company Subfolder --> Product Subfolder --> File
		  PreferenceFolder = SpecialFolder.ApplicationData
		  
		  if PreferenceFolder.Exists =True then
		    // Check to see if the company's Sub Folder Exists
		    PreferenceFolder = SpecialFolder.ApplicationData.Child("com.intelligentvisibility")
		    if PreferenceFolder.Exists = False Then
		      // Company's Subfolder Does Not Exist - Create Subfolder
		      PreferenceFolder.CreateAsFolder
		      
		      //  Check to see if the product Subfolder Exists
		      PreferenceFolder = PreferenceFolder.Child("IntelligentSubnetCalculator")
		      If PreferenceFolder.Exists = False Then
		        //  Product Subfolder Does Not Exist - Create Subfolder
		        PreferenceFolder.CreateAsFolder
		        
		        //  Check to see if File Exists
		        PreferenceFolder = PreferenceFolder.Child("Preferences_"+Str(App.MajorVersion)+Str(App.MinorVersion))
		        If PreferenceFolder.Exists = False Then
		          // File does not exist - Create file
		          mCreatePreferencesFileFormat(TOS,PreferenceFolder)
		        End if
		        
		      End if
		      
		      
		    Elseif PreferenceFolder.Exists = True Then
		      // Company Subfolder Exists!
		      // Check for Product Subfolder
		      PreferenceFolder = PreferenceFolder.Child("IntelligentSubnetCalculator")
		      If PreferenceFolder.Exists = False Then
		        //  Product Subfolder Does Not Exist - Create Subfolder
		        PreferenceFolder.CreateAsFolder
		        //  Check to see if File Exists
		        PreferenceFolder = PreferenceFolder.Child("Preferences_"+Str(App.MajorVersion)+Str(App.MinorVersion))
		        If PreferenceFolder.Exists = False Then
		          // File does not exist - Create file
		          mCreatePreferencesFileFormat(TOS,PreferenceFolder)
		        End if
		        
		      Elseif PreferenceFolder.Exists = True Then
		        //  Product Subfolder Exists!
		        PreferenceFolder = PreferenceFolder.Child("Preferences_"+Str(App.MajorVersion)+Str(App.MinorVersion))
		        If PreferenceFolder.Exists = False Then
		          // File does not exist - Create file
		          mCreatePreferencesFileFormat(TOS,PreferenceFolder)
		        End if
		        
		      End if
		      
		    End if
		    
		    
		  end if
		  
		  // Load Preferences
		  TIS = TextInputStream.Open(PreferenceFolder)
		  PreferenceFileContents = TIS.ReadAll
		  LoadPreferences(PreferenceFileContents)
		  TIS.Close
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub mWriteGeneral_Preferences(KeyName as String, NewKeyValue as String)
		  Dim PreferenceFolder As FolderItem
		  Dim PreferenceFolder_Out as FolderItem
		  Dim TOS as TextOutputStream
		  Dim TIS as TextInputStream
		  Dim PreferenceFileContents,NewPreferenceString as String
		  
		  // Create Company Subfolder --> Product Subfolder --> File
		  PreferenceFolder = SpecialFolder.ApplicationData.Child("com.intelligentvisibility").Child("IntelligentSubnetCalculator").Child("Preferences_"+Str(App.MajorVersion)+Str(App.MinorVersion))
		  
		  if PreferenceFolder.Exists =True AND PreferenceFolder <> Nil  then
		    TIS = TextInputStream.Open(PreferenceFolder)
		    PreferenceFileContents = TIS.ReadAll
		    
		    // Add General Preferences To Write
		    NewPreferenceString = Write_Preferences(PreferenceFileContents,KeyName,NewKeyValue)
		    TIS.Close
		  end if
		  
		  PreferenceFolder_Out = SpecialFolder.ApplicationData.Child("com.intelligentvisibility").Child("IntelligentSubnetCalculator").Child("Preferences_"+Str(App.MajorVersion)+Str(App.MinorVersion))
		  
		  if PreferenceFolder_Out.Exists =True  then
		    TOS = TextOutputStream.Create(PreferenceFolder_Out)
		    TOS.Write(NewPreferenceString+EndOfLine)
		    TOS.Close
		  end if
		  
		  NewPreferenceString = ""
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_AppearanceStyle_Menu(value as String)
		  // Map PopUp Index values to String
		  // "Normal View, Tiny View"
		  if Value = "Normal View" Then
		    AppearanceStylePopUpValue = 0
		  Elseif Value = "Tiny View" Then
		    AppearanceStylePopUpValue = 1
		  End if
		  
		  Preferences_Window.General_Settings_Container1.AppearanceStyle_PopupMenu.ListIndex = AppearanceStylePopUpValue
		  Preferences_Window.Hide
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_CalculatorWindowTransparency_Menu(Value as String)
		  // Map PopUp Index values to String
		  if Value = "0%" Then
		    AppearanceWindowTransparencyPopUpValue = 0
		  Elseif Value = "5%" Then
		    AppearanceWindowTransparencyPopUpValue = 1
		  Elseif Value = "10%" Then
		    AppearanceWindowTransparencyPopUpValue = 2
		  Elseif Value = "15%" Then
		    AppearanceWindowTransparencyPopUpValue = 3
		  Elseif Value = "20%" Then
		    AppearanceWindowTransparencyPopUpValue = 4
		  Elseif Value = "25%" Then
		    AppearanceWindowTransparencyPopUpValue = 5
		  Elseif Value = "30%" Then
		    AppearanceWindowTransparencyPopUpValue = 6
		  Elseif Value = "35%" Then
		    AppearanceWindowTransparencyPopUpValue = 7
		  Elseif Value = "40%" Then
		    AppearanceWindowTransparencyPopUpValue = 8
		  Elseif Value = "45%" Then
		    AppearanceWindowTransparencyPopUpValue = 9
		  Elseif Value = "50%" Then
		    AppearanceWindowTransparencyPopUpValue = 10
		  Elseif Value = "55%" Then
		    AppearanceWindowTransparencyPopUpValue = 11
		  Elseif Value = "60%" Then
		    AppearanceWindowTransparencyPopUpValue = 12
		  Elseif Value = "65%" Then
		    AppearanceWindowTransparencyPopUpValue = 13
		  Elseif Value = "70%" Then
		    AppearanceWindowTransparencyPopUpValue = 14
		  Elseif Value = "75%" Then
		    AppearanceWindowTransparencyPopUpValue = 15
		  Elseif Value = "80%" Then
		    AppearanceWindowTransparencyPopUpValue = 16
		  Elseif Value = "85%" Then
		    AppearanceWindowTransparencyPopUpValue = 17
		  Elseif Value = "90%" Then
		    AppearanceWindowTransparencyPopUpValue = 18
		  Elseif Value = "95%" Then
		    AppearanceWindowTransparencyPopUpValue = 19
		  End if
		  
		  Preferences_Window.General_Settings_Container1.WindowTransparency_PopUpmenu.ListIndex = AppearanceWindowTransparencyPopUpValue
		  Preferences_Window.Hide
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_CheckForVersionUpgradeFreq(Value as String)
		  // Map PopUp Index values to String
		  If Value = "Every Launch" Then
		    CheckForVerUpgradeFreqValue = 0
		  Elseif Value = "Weekly" Then
		    CheckForVerUpgradeFreqValue = 1
		  Elseif Value = "Never" Then
		    CheckForVerUpgradeFreqValue = 2
		  End if
		  
		  Preferences_Window.SoftwareSettings_Container1.UpdateSoftwareFreq_PopupMenu.ListIndex = CheckForVerUpgradeFreqValue
		  Preferences_Window.Hide
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_DateLastCheckedForVersionUpgrade(Value as String)
		  // Map Preferences -->Software Preferences --> Value of Date last Checked for Version Upgrades
		  Preferences_Window.SoftwareSettings_Container1.DateVersionLastChecked_Datalabel.Text = Value
		  
		  
		  Preferences_Window.Hide
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_ThemeLayout_Menu(Value as String)
		  // Map PopUp Index values to String
		  if Value = "Green" Then
		    ThemePopUpValue = 0
		  Elseif Value = "Ocean" Then
		    ThemePopUpValue = 1
		  Elseif Value = "Valentine" Then
		    ThemePopUpValue = 2
		  Elseif Value = "Peaches" Then
		    ThemePopUpValue = 3
		  Elseif Value = "Spring" Then
		    ThemePopUpValue = 4
		  End if
		  
		  Preferences_Window.General_Settings_Container1.Layout_PopUpMenu.ListIndex = ThemePopUpValue
		  Preferences_Window.Hide
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Update_UpgradeInstallationMethod(Value as String)
		  if Value = "Auto install" Then
		    InstallMethodValue = 0
		    App.Preferences.AutoInstall = True
		  Elseif Value = "Manual install" Then
		    InstallMethodValue = 1
		    App.Preferences.AutoInstall = False
		  End if
		  
		  Preferences_Window.SoftwareSettings_Container1.AutoInstall_PopupMenu.ListIndex = InstallMethodValue
		  
		  Preferences_Window.Hide
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function Write_Preferences(SourceFile as String, KeyName as String, NewKeyValue as String) As String
		  Dim NewPrefString As String
		  Dim PreferenceFindReplace_RegEx As RegEx
		  PreferenceFindReplace_RegEx = New RegEx
		  PreferenceFindReplace_RegEx.Options.Greedy = True
		  PreferenceFindReplace_RegEx.Options.caseSensitive = True
		  PreferenceFindReplace_RegEx.Options.ReplaceAllMatches = True
		  PreferenceFindReplace_RegEx.SearchPattern = KeyName+"=.+(?=;)"
		  PreferenceFindReplace_RegEx.ReplacementPattern = KeyName+"=" + NewKeyValue
		  
		  NewPrefString = PreferenceFindReplace_RegEx.Replace(SourceFile)
		  
		  Return NewPrefString
		  
		End Function
	#tag EndMethod


	#tag Property, Flags = &h0
		AppearanceStylePopUpValue As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		AppearanceWindowTransparencyPopUpValue As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		AutoInstall As Boolean = False
	#tag EndProperty

	#tag Property, Flags = &h0
		CheckForVerUpgradeFreqValue As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		DateLastCheckedForVerUpgradeString As String
	#tag EndProperty

	#tag Property, Flags = &h0
		InstallMethodValue As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		ThemePopUpValue As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		VersionUpgradeFreqSettingFromPref_File As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="AppearanceStylePopUpValue"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AppearanceWindowTransparencyPopUpValue"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AutoInstall"
			Group="Behavior"
			InitialValue="False"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CheckForVerUpgradeFreqValue"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="DateLastCheckedForVerUpgradeString"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="InstallMethodValue"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ThemePopUpValue"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="VersionUpgradeFreqSettingFromPref_File"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
