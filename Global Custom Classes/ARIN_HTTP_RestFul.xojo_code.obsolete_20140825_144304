#tag Class
Protected Class ARIN_HTTP_RestFul
Inherits HTTPSocket
	#tag Event
		Sub DownloadComplete(url as string, httpStatus as integer, headers as internetHeaders, file as folderItem)
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub Error(code as integer)
		  if code = 0 Then
		    ARIN_ConnectState = 0 //Success
		  else
		    ARIN_ConnectState = 1 // Failed
		    MsgBox "Could not access ARIN's API at this time."+EndOfLine+EndOfLine+"Failed to connect to: http://www.arin.net"
		  End if
		End Sub
	#tag EndEvent

	#tag Event
		Sub HeadersReceived(headers as internetHeaders, httpStatus as integer)
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub PageReceived(url as string, httpStatus as integer, headers as internetHeaders, content as string)
		  // Parse Org Info
		  ORG_Name = fParseOrgResults(content)
		  WhoIsView_Window.ARIN_Org_TextField.Text = ORG_Name
		  
		  // Parse ASN Info
		  ASN_Number = fParseASNResults(content)
		  if ASN_Number = "" Then
		    WhoIsView_Window.ARIN_ASN_TextField.Text = "ASN not available"
		  Else
		    WhoIsView_Window.ARIN_ASN_TextField.Text = ASN_Number
		  End if
		  
		  // Parse Registration Date
		  RegDate = fParseRegDateResults(content)
		  If RegDate = "" Then
		    WhoIsView_Window.ARIN_RegDate_TextField.Text = "Registration date not available"
		    
		  Else
		    WhoIsView_Window.ARIN_RegDate_TextField.Text = RegDate
		  End if
		  
		  // Parse Parent Info
		  ParentInfo = fParseParentResults(content)
		  If ParentInfo = "" Then
		    WhoIsView_Window.ARIN_Parent_TextField.Text = "Parent info not available"
		    WhoIsView_Window.ARIN_Parent_TextField.Underline = False
		    WhoIsView_Window.ARIN_Parent_TextField.TextColor = RGB(0,0,0)
		    WhoIsView_Window.AllowLinkBoolean = False
		  Else
		    WhoIsView_Window.ARIN_Parent_TextField.Text = ParentInfo
		    WhoIsView_Window.AllowLinkBoolean = True
		    WhoIsView_Window.ARIN_Parent_TextField.Underline = True
		    WhoIsView_Window.ARIN_Parent_TextField.TextColor = RGB(4,51,255)
		  End if
		  
		  
		  // Parse Net Range
		  NetRange = fParseNetRangeResults(content)
		  If NetRange = "" Then
		    WhoIsView_Window.ARIN_NetRange_TextField.Text = "Network range not available"
		  Else
		    WhoIsView_Window.ARIN_NetRange_TextField.Text = NetRange
		  End if
		  
		  // Network Type
		  NetType = fParseNetTypeResults(content)
		  if NetType = "" Then
		    WhoIsView_Window.ARIN_NetType_TextField.Text = "Network type not available"
		  Else
		    WhoIsView_Window.ARIN_NetType_TextField.Text = NetType
		  End if
		  
		  // CIDR Blocks
		  mParseCIDRBlockResults(content)
		  WhoIsView_Window.ARIN_CIDR_LB.DeleteAllRows
		  For i as integer = 0 to UBound(CIDR_NETs)
		    WhoIsView_Window.ARIN_CIDR_LB.Addrow CIDR_NETs(i) + "/"+CIDR_Lengths(i)
		  Next i
		  
		  // Parse Handle
		  HandleID = fParseHandleResults(content)
		  if HandleID = "" then
		    WhoIsView_Window.ARIN_Handle_TextField.Text = "Handle ID not available"
		  Else
		    WhoIsView_Window.ARIN_Handle_TextField.Text = HandleID
		  End if
		  
		  // Parse RESTFul Link
		  WhoIsView_Window.ARIN_RESTFulLink= fParseRESTFULLinkResults(content)
		  
		  // Parse Organization Link
		  WhoIsView_Window.ARIN_ORGLink = fParseORGLinkResults(content)
		  
		  // Parse Parent Link
		  WhoIsView_Window.ARIN_ParentLINK = fParseParentLINKResults(content)
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub ReceiveProgress(bytesReceived as integer, totalBytes as integer, newData as string)
		  
		End Sub
	#tag EndEvent


	#tag Method, Flags = &h1000
		Sub Constructor()
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From TCPSocket
		  // Constructor() -- From SocketCore
		  Super.Constructor
		  
		  //Setup HTTP Headers
		  Me.Port = 80
		  Me.SetRequestHeader("Accept-Encoding:","gzip,deflate")
		  Me.SetRequestHeader("Accept:","application/arin.whoisrws-v1+xml")
		  Me.SetRequestHeader("User-Agent:","Jakarta Commons-HttpClient/3.1")
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseASNResults(inString as String) As String
		  // Expect <originAS>AS19262</originAS></originASes>
		  
		  Dim ParseASN_RegEx as RegEx
		  Dim ParseASN_RegExMatch as RegExMatch
		  Dim ParseASN_Value as String
		  ParseASN_RegEx = New RegEx
		  ParseASN_RegEx.Options.Greedy = False
		  ParseASN_RegEx.Options.caseSensitive = false
		  ParseASN_RegEx.SearchPattern = "(?<=<originAS>).+(?=</originAS>)"
		  ParseASN_RegExMatch = ParseASN_RegEx.Search(inString)
		  if ParseASN_RegExMatch <> nil then
		    ParseASN_Value = ParseASN_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseASN_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseHandleResults(inString as String) As String
		  // Expect <parentNetRef name="NET174" handle="NET-174-0-0-0-0">http://whois.arin.net/rest/net/NET-174-0-0-0-0</parentNetRef
		  
		  Dim ParseHandleID_RegEx as RegEx
		  Dim ParseHandleID_RegExMatch as RegExMatch
		  Dim ParseHandleID_Value as String
		  ParseHandleID_RegEx = New RegEx
		  ParseHandleID_RegEx.Options.Greedy = False
		  ParseHandleID_RegEx.Options.caseSensitive = False
		  ParseHandleID_RegEx.SearchPattern = "(?<=<handle>).+(?=</handle>)"
		  ParseHandleID_RegExMatch = ParseHandleID_RegEx.Search(inString)
		  if ParseHandleID_RegExMatch <> nil then
		    ParseHandleID_Value = ParseHandleID_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseHandleID_Value
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseNetRangeResults(inString as String) As String
		  // Start of Net Range
		  Dim ParseNetRangeStart_RegEx as RegEx
		  Dim ParseNetRangeStart_RegExMatch as RegExMatch
		  Dim ParseNetRangeStart_Value as String
		  ParseNetRangeStart_RegEx = New RegEx
		  ParseNetRangeStart_RegEx.Options.Greedy = False
		  ParseNetRangeStart_RegEx.Options.caseSensitive = false
		  ParseNetRangeStart_RegEx.SearchPattern = "(?<=<startAddress>).+(?=</startAddress>)"
		  ParseNetRangeStart_RegExMatch = ParseNetRangeStart_RegEx.Search(inString)
		  
		  While ParseNetRangeStart_RegExMatch <> nil
		    ParseNetRangeStart_Value = ParseNetRangeStart_RegExMatch.SubExpressionString(0)
		    ParseNetRangeStart_RegExMatch = ParseNetRangeStart_RegEx.Search
		  Wend
		  
		  // End of Net Range
		  Dim ParseNetRangeEND_RegEx as RegEx
		  Dim ParseNetRangeEND_RegExMatch as RegExMatch
		  Dim ParseNetRangeEND_Value as String
		  ParseNetRangeEND_RegEx = New RegEx
		  ParseNetRangeEND_RegEx.Options.Greedy = False
		  ParseNetRangeEND_RegEx.Options.caseSensitive = false
		  ParseNetRangeEND_RegEx.SearchPattern = "(?<=<ENDaddress>).+(?=</endaddress><handle>)"
		  ParseNetRangeEND_RegExMatch = ParseNetRangeEND_RegEx.Search(inString)
		  if ParseNetRangeEND_RegExMatch <> nil then
		    ParseNetRangeEND_Value = ParseNetRangeEND_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim ReturnValueString as String = ParseNetRangeStart_Value + " - " + ParseNetRangeEND_Value
		  Return ReturnValueString
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseNetTypeResults(inString as String) As String
		  Dim ParseNetType_RegEx as RegEx
		  Dim ParseNetType_RegExMatch as RegExMatch
		  Dim ParseNetType_Value as String
		  ParseNetType_RegEx = New RegEx
		  ParseNetType_RegEx.Options.Greedy = False
		  ParseNetType_RegEx.Options.caseSensitive = True
		  ParseNetType_RegEx.SearchPattern = "(?<=<description>).+(?=</description>)"
		  ParseNetType_RegExMatch = ParseNetType_RegEx.Search(inString)
		  if ParseNetType_RegExMatch <> nil then
		    ParseNetType_Value = ParseNetType_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseNetType_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseORGLinkResults(inString as String) As String
		  
		  Dim ParseOrgLink_RegEx as RegEx
		  Dim ParseOrgLink_RegExMatch as RegExMatch
		  Dim ParseOrgLink_Value as String
		  ParseOrgLink_RegEx = New RegEx
		  ParseOrgLink_RegEx.Options.Greedy = False
		  ParseOrgLink_RegEx.Options.caseSensitive = True
		  ParseOrgLink_RegEx.SearchPattern = "(?<=<orgRef name="").+(?=</orgRef>)"
		  ParseOrgLink_RegExMatch = ParseOrgLink_RegEx.Search(inString)
		  if ParseOrgLink_RegExMatch <> nil then
		    ParseOrgLink_Value = ParseOrgLink_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim ParseOrgLink2_RegEx as RegEx
		  Dim ParseOrgLink2_RegExMatch as RegExMatch
		  Dim ParseOrgLink2_Value as String
		  ParseOrgLink2_RegEx = New RegEx
		  ParseOrgLink2_RegEx.Options.Greedy = True
		  ParseOrgLink2_RegEx.Options.caseSensitive = True
		  ParseOrgLink2_RegEx.SearchPattern = "(http:).+"
		  ParseOrgLink2_RegExMatch = ParseOrgLink2_RegEx.Search(ParseOrgLink_Value)
		  if ParseOrgLink2_RegExMatch <> nil then
		    ParseOrgLink2_Value = ParseOrgLink2_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseOrgLink2_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseOrgResults(inString as String) As String
		  // Expect <orgRef name="Verizon Online LLC" handle="VRIS">http://whois.arin.net/rest/org/VRIS</orgRef>
		  
		  Dim ParseOrg_RegEx as RegEx
		  Dim ParseOrg_RegExMatch as RegExMatch
		  Dim ParseOrg_Value as String
		  ParseOrg_RegEx = New RegEx
		  ParseOrg_RegEx.Options.Greedy = False
		  ParseOrg_RegEx.Options.caseSensitive = false
		  ParseOrg_RegEx.SearchPattern = "(?<=<orgRef name="").+(?=""\s)"
		  ParseOrg_RegExMatch = ParseOrg_RegEx.Search(inString)
		  if ParseOrg_RegExMatch <> nil then
		    ParseOrg_Value = ParseOrg_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseOrg_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseParentLINKResults(inString as String) As String
		  Dim ParseParentLink_RegEx as RegEx
		  Dim ParseParentLink_RegExMatch as RegExMatch
		  Dim ParseParentLink_Value as String
		  ParseParentLink_RegEx = New RegEx
		  ParseParentLink_RegEx.Options.Greedy = False
		  ParseParentLink_RegEx.Options.caseSensitive = False
		  ParseParentLink_RegEx.SearchPattern = "(?<=<parentNetRef name="").+(?=</parentNetRef>)"
		  ParseParentLink_RegExMatch = ParseParentLink_RegEx.Search(inString)
		  if ParseParentLink_RegExMatch <> nil then
		    ParseParentLink_Value = ParseParentLink_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Parse Out Parent Name
		  Dim ParseParentLink2_RegEx as RegEx
		  Dim ParseParentLink2_RegExMatch as RegExMatch
		  Dim ParseParentLink2_Value as String
		  ParseParentLink2_RegEx = New RegEx
		  ParseParentLink2_RegEx.Options.Greedy = True
		  ParseParentLink2_RegEx.Options.caseSensitive = False
		  ParseParentLink2_RegEx.SearchPattern = "(http:).+"
		  ParseParentLink2_RegExMatch = ParseParentLink2_RegEx.Search(ParseParentLink_Value)
		  if ParseParentLink2_RegExMatch <> nil then
		    ParseParentLink2_Value = ParseParentLink2_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseParentLink2_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseParentResults(inString as String) As String
		  // Expect <parentNetRef name="NET174" handle="NET-174-0-0-0-0">http://whois.arin.net/rest/net/NET-174-0-0-0-0</parentNetRef
		  
		  Dim ParseParentStart_RegEx as RegEx
		  Dim ParseParentStart_RegExMatch as RegExMatch
		  Dim ParseParentStart_Value as String
		  ParseParentStart_RegEx = New RegEx
		  ParseParentStart_RegEx.Options.Greedy = False
		  ParseParentStart_RegEx.Options.caseSensitive = False
		  ParseParentStart_RegEx.SearchPattern = "(?<=<parentNetRef name="").+(?="">)"
		  ParseParentStart_RegExMatch = ParseParentStart_RegEx.Search(inString)
		  if ParseParentStart_RegExMatch <> nil then
		    ParseParentStart_Value = ParseParentStart_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Parse Out Parent Name
		  Dim ParseParentName_RegEx as RegEx
		  Dim ParseParentName_RegExMatch as RegExMatch
		  Dim ParseParentName_Value as String
		  ParseParentName_RegEx = New RegEx
		  ParseParentName_RegEx.Options.Greedy = False
		  ParseParentName_RegEx.Options.caseSensitive = False
		  ParseParentName_RegEx.SearchPattern = "^.+(?="")"
		  ParseParentName_RegExMatch = ParseParentName_RegEx.Search(ParseParentStart_Value)
		  if ParseParentName_RegExMatch <> nil then
		    ParseParentName_Value = ParseParentName_RegExMatch.SubExpressionString(0)
		  end if
		  
		  // Parse Out Parent ID
		  Dim ParseParentID_RegEx as RegEx
		  Dim ParseParentID_RegExMatch as RegExMatch
		  Dim ParseParentID_Value as String
		  ParseParentID_RegEx = New RegEx
		  ParseParentID_RegEx.Options.Greedy = True
		  ParseParentID_RegEx.Options.caseSensitive = False
		  ParseParentID_RegEx.SearchPattern = "(?<=handle="").+"
		  ParseParentID_RegExMatch = ParseParentID_RegEx.Search(ParseParentStart_Value)
		  if ParseParentID_RegExMatch <> nil then
		    ParseParentID_Value = ParseParentID_RegExMatch.SubExpressionString(0)
		  end if
		  
		  
		  Dim FinalString as String = ParseParentName_Value + " ("+ParseParentID_Value+")"
		  // Check for Blank Entries
		  If FinalString = " ()" Then
		    Return ""
		  Else
		    Return FinalString
		  End if
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseRegDateResults(inString as String) As String
		  // Expect <registrationDate>2010-12-28T12:47:35-05:00</registrationDate>
		  
		  Dim ParseRegDate_RegEx as RegEx
		  Dim ParseRegDate_RegExMatch as RegExMatch
		  Dim ParseRegDate_Value as String
		  ParseRegDate_RegEx = New RegEx
		  ParseRegDate_RegEx.Options.Greedy = False
		  ParseRegDate_RegEx.Options.caseSensitive = True
		  ParseRegDate_RegEx.SearchPattern = "(?<=<registrationDate>).+(?=T)"
		  ParseRegDate_RegExMatch = ParseRegDate_RegEx.Search(inString)
		  if ParseRegDate_RegExMatch <> nil then
		    ParseRegDate_Value = ParseRegDate_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseRegDate_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseRESTFULLinkResults(inString as String) As String
		  
		  Dim ParseRESTFulLink_RegEx as RegEx
		  Dim ParseRESTFulLink_RegExMatch as RegExMatch
		  Dim ParseRESTFulLink_Value as String
		  ParseRESTFulLink_RegEx = New RegEx
		  ParseRESTFulLink_RegEx.Options.Greedy = False
		  ParseRESTFulLink_RegEx.Options.caseSensitive = True
		  ParseRESTFulLink_RegEx.SearchPattern = "(?<=<ref>).+(?=</ref>)"
		  ParseRESTFulLink_RegExMatch = ParseRESTFulLink_RegEx.Search(inString)
		  if ParseRESTFulLink_RegExMatch <> nil then
		    ParseRESTFulLink_Value = ParseRESTFulLink_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseRESTFulLink_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseTOUResults(inString as String) As String
		  // (?<=termsOfUse=").+(?=">)
		  
		  Dim ParseTOU_RegEx as RegEx
		  Dim ParseTOU_RegExMatch as RegExMatch
		  Dim ParseTOU_Value as String
		  ParseTOU_RegEx = New RegEx
		  ParseTOU_RegEx.Options.Greedy = False
		  ParseTOU_RegEx.Options.caseSensitive = True
		  ParseTOU_RegEx.SearchPattern = "(?<=termsOfUse="").+(?="">)"
		  ParseTOU_RegExMatch = ParseTOU_RegEx.Search(inString)
		  if ParseTOU_RegExMatch <> nil then
		    ParseTOU_Value = ParseTOU_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseTOU_Value
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub GetData(Resource as String, InString as String)
		  Me.Get(ARIN_RestFulURL+"/"+Resource+"/"+InString)
		  
		  if SearchByMainWindow = True Then
		    If App.TinyViewEnabled = True Then
		      WhoIsView_Window.ARIN_LookUpTarget_TextField.Text = TinyViewWindow.TinyListbox.Cell(0,0)
		    else
		      WhoIsView_Window.ARIN_LookUpTarget_TextField.Text = MainWindow.SubnetRangeListbox.Cell(MainWindow.SubnetRangeListbox.ListIndex,1)
		    End if
		  End if
		  
		  // Check to see if we actually did Connect to ARIN
		  if ARIN_ConnectState = 0 Then
		    WhoIsView_Window.Show
		  Elseif ARIN_ConnectState = 1 Then
		    WhoIsView_Window.Close
		  end if
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub mParseCIDRBlockResults(inString as String)
		  Dim ParseCIDRBlockLen_RegEx as RegEx
		  Dim ParseCIDRBlockLen_RegExMatch as RegExMatch
		  Dim ParseCIDRBlockLen_Value as String
		  ParseCIDRBlockLen_RegEx = New RegEx
		  ParseCIDRBlockLen_RegEx.Options.Greedy = False
		  ParseCIDRBlockLen_RegEx.Options.caseSensitive = false
		  ParseCIDRBlockLen_RegEx.SearchPattern = "(?<=<cidrLength>).+(?=</cidrLength>)"
		  
		  Dim ParseCIDRBlock_RegEx as RegEx
		  Dim ParseCIDRBlock_RegExMatch as RegExMatch
		  Dim ParseCIDRBlock_Value as String
		  ParseCIDRBlock_RegEx = New RegEx
		  ParseCIDRBlock_RegEx.Options.Greedy = False
		  ParseCIDRBlock_RegEx.Options.caseSensitive = false
		  ParseCIDRBlock_RegEx.SearchPattern = "(?<=</type><startAddress>).+(?=</startAddress>)"
		  
		  ParseCIDRBlockLen_RegExMatch = ParseCIDRBlockLen_RegEx.Search(inString)
		  While ParseCIDRBlockLen_RegExMatch <> nil
		    ParseCIDRBlockLen_Value = ParseCIDRBlockLen_RegExMatch.SubExpressionString(0)
		    ParseCIDRBlockLen_RegExMatch = ParseCIDRBlockLen_RegEx.Search
		    CIDR_Lengths.Append ParseCIDRBlockLen_Value
		  Wend
		  
		  ParseCIDRBlock_RegExMatch = ParseCIDRBlock_RegEx.Search(inString)
		  While ParseCIDRBlock_RegExMatch <> Nil
		    ParseCIDRBlock_Value = ParseCIDRBlock_RegExMatch.SubExpressionString(0)
		    ParseCIDRBlock_RegExMatch = ParseCIDRBlock_RegEx.Search
		    CIDR_NETs.Append ParseCIDRBlock_Value
		  Wend
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h21
		Private ARIN_ConnectState As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ARIN_OrgLink As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ARIN_ParentLink As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ARIN_RestFulURL As String = "http://whois.arin.net/rest"
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ARIN_TOU As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ASN_Number As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private CIDR_Block As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private CIDR_Lengths() As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private CIDR_NETs() As String
	#tag EndProperty

	#tag Property, Flags = &h0
		DetectDefaultNoInfoMesage As Boolean = False
	#tag EndProperty

	#tag Property, Flags = &h21
		Private HandleID As String
	#tag EndProperty

	#tag Property, Flags = &h0
		Load_ProgressPercentageComplete As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private NetRange As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private NetType As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ORG_Name As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private ParentInfo As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Private RegDate As String
	#tag EndProperty

	#tag Property, Flags = &h0
		SearchByMainWindow As Boolean = False
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Address"
			Visible=true
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BytesAvailable"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BytesLeftToSend"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="DetectDefaultNoInfoMesage"
			Group="Behavior"
			InitialValue="False"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Handle"
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="httpProxyAddress"
			Group="Behavior"
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="httpProxyPort"
			Group="Behavior"
			InitialValue="0"
			Type="integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="IsConnected"
			Group="Behavior"
			InitialValue="0"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="LastErrorCode"
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Load_ProgressPercentageComplete"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="LocalAddress"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Port"
			Visible=true
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="RemoteAddress"
			Group="Behavior"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="SearchByMainWindow"
			Group="Behavior"
			InitialValue="False"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="yield"
			Group="Behavior"
			InitialValue="0"
			Type="boolean"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
