#tag Class
Protected Class GETIP_Info_HTTP
Inherits HTTPSocket
	#tag Event
		Sub Error(code as integer)
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub HeadersReceived(headers as internetHeaders, httpStatus as integer)
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub PageReceived(url as string, httpStatus as integer, headers as internetHeaders, content as string)
		  // Do a quick Test to ensure we didn't get a non JSON msg
		  if content = "Please provide a valid IP address" Then Return
		  
		  Dim JSON_Results as String = DefineEncoding(content, Encodings.UTF8 )
		  Dim JSON_Results_Item as new JSONItem(JSON_Results)
		  Dim JSONResults_Dict as New Dictionary
		  
		  if SearchType = "my_info" Then
		    for i as integer = 0 to JSON_Results_Item.Count-1
		      JSONResults_Dict.Value(JSON_Results_Item.Name(i)) = JSON_Results_Item.Value(JSON_Results_Item.Name(i))
		    next i
		    IPInfo_Window.GetMyInformation_ContainerControl1.GetMYInfo_Dictionary = JSONResults_Dict
		    IPInfo_Window.GetMyInformation_ContainerControl1.mPushMyInfoToWindow
		    
		  Elseif SearchType = "manual_search" Then
		    Dim JSON_Results_Str as String
		    for i as integer = 0 to JSON_Results_Item.Count-1
		      JSON_Results_Str = JSON_Results_Str + DefineEncoding((JSON_Results_Item.Name(i)) + ":"+ JSON_Results_Item.Value(JSON_Results_Item.Name(i))+EndOfLine,Encodings.UTF8)
		    next i
		    
		    // Get Public IP Value
		    Dim IPValue as String = fFindValue_Search(JSON_Results_Str,"ip")
		    If IPValue = "" Then IPValue = "no results found"
		    // Get Public Hostname Value
		    Dim HostnameValue as String = fFindValue_Search(JSON_Results_Str,"hostname")
		    If HostnameValue = "" Then HostnameValue = "no results found"
		    // Get City Value
		    Dim CityValue as String = fFindValue_Search(JSON_Results_Str,"city")
		    If CityValue = "" Then CityValue = "no results found"
		    // Get Region (State) Value
		    Dim RegionValue as String = fFindValue_Search(JSON_Results_Str,"region")
		    If RegionValue = "" Then RegionValue = "no results found"
		    // Get Country Value
		    Dim CountryValue as String = fFindValue_Search(JSON_Results_Str,"country")
		    If CountryValue = "" Then CountryValue = "no results found"
		    // Get Lat/Long Value
		    Dim LocValue as String = fFindValue_Search(JSON_Results_Str,"loc")
		    If LocValue = "" Then LocValue = "no results found"
		    // Get ISP Value
		    Dim OrgValue as String = fFindValue_Search(JSON_Results_Str,"org")
		    If OrgValue = "" Then OrgValue = "no results found"
		    // Is this a Valid search?
		    Dim BogonValue as String = fFindValue_Search(JSON_Results_Str,"bogon")
		    
		    // Push values to Container Processing Method
		    IPInfo_Window.SearchFoInformation_ContainerControl1.mPushMyInfoToWindow(IPValue,HostnameValue,CityValue,RegionValue,CountryValue,LocValue,OrgValue,BogonValue)
		  End if
		  
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub ReceiveProgress(bytesReceived as integer, totalBytes as integer, newData as string)
		  
		End Sub
	#tag EndEvent


	#tag Method, Flags = &h1000
		Sub Constructor()
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From TCPSocket
		  // Constructor() -- From SocketCore
		  Super.Constructor
		  
		  //Setup HTTP Headers
		  Me.Port = 80
		  Me.SetRequestHeader("Accept-Encoding:","gzip,deflate")
		  Me.SetRequestHeader("Accept:","application/arin.whoisrws-v1+xml")
		  Me.SetRequestHeader("User-Agent:","Jakarta Commons-HttpClient/3.1")
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fFindValue_Search(inFileToSearch as String, inValueToSearchFor as String) As String
		  Dim Find_Value_RegEx as RegEx
		  Dim Find_Value_RegExMatch as RegExMatch
		  Dim Find_Value_HitText as String
		  Find_Value_RegEx = New RegEx
		  Find_Value_RegEx.Options.Greedy = True
		  Find_Value_RegEx.Options.caseSensitive = false
		  Find_Value_RegEx.SearchPattern = "(?<="+inValueToSearchFor+":).+(?=\s)"
		  Find_Value_RegExMatch = Find_Value_RegEx.Search(inFileToSearch)
		  if Find_Value_RegExMatch <> nil then
		    Find_Value_HitText = Find_Value_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return Find_Value_HitText
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub GetMYIP_Info(inURL as String)
		  Me.Get(inURL)
		  SearchType = "my_info"
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SearchIP_Info(inIPAddress as String)
		  // Create Full URL
		  Dim URL1 as String = "http://ipinfo.io/"
		  Dim URL2 as String = URL1 + inIPAddress
		  Dim FinalURL as String = URL2 + "/json"
		  Me.Get(FinalURL)
		  SearchType = "manual_search"
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h21
		Private SearchInfo_String As String
	#tag EndProperty

	#tag Property, Flags = &h0
		SearchType As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Address"
			Visible=true
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BytesAvailable"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BytesLeftToSend"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Handle"
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="httpProxyAddress"
			Group="Behavior"
			Type="string"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="httpProxyPort"
			Group="Behavior"
			InitialValue="0"
			Type="integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="IsConnected"
			Group="Behavior"
			InitialValue="0"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="LastErrorCode"
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="LocalAddress"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Port"
			Visible=true
			Group="Behavior"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="RemoteAddress"
			Group="Behavior"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="SearchType"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="yield"
			Group="Behavior"
			InitialValue="0"
			Type="boolean"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
