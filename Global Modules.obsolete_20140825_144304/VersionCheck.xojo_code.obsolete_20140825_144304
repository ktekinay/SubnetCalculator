#tag Module
Protected Module VersionCheck
	#tag Method, Flags = &h0
		Function fCalculateDailyUpdate() As String
		  // Calculate Once a Day -- 2:00pm EST
		  
		  Dim CurrentTime as New Date
		  if CurrentTime.Hour >= 14 AND CurrentTime.Hour <= 24 Then
		    // Its 2:00 or past 2:00 up to midnight ;)
		    Return "Fire"
		  End if
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fCalculateWeeklyUpdate() As String
		  // Caculate Once a Week --
		  
		  // Every Open Compare Todays Date with Wed and if wed then fire
		  
		  Dim TodayDayOfWeek as New Date
		  
		  // The day of the week as an integer: 1=Sunday, 7=Saturday.
		  if TodayDayOfWeek.DayOfWeek = 4 Then
		    // It's Wed!!
		    Return "Fire"
		  end if
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fCompareVersions(inCurrentAvailableVersion as String, inCurrentRunningVersion as String) As String
		  // Compare the Current Available Version(Web) with Current Running Version and Return Boolean T or F
		  // Remove Periods to Compare 1.1.1
		  
		  // Need To Refactor to Find how many Chrs to the . (remove) then the same up to the first
		  
		  Dim AvailableMajorVer as String = inCurrentAvailableVersion.NthField(".",1)
		  Dim AvailableMinorVer as String = inCurrentAvailableVersion.NthField(".",2)
		  Dim AvailableBugVer as String = inCurrentAvailableVersion.NthField(".",3)
		  Dim AvailableWinVer as String = AvailableBugVer.NthField("(",1)
		  
		  Dim AvailableVersionString as String = AvailableMajorVer+AvailableMinorVer+AvailableWinVer
		  Dim AvailableVersionInt as Integer = CDbl(AvailableVersionString)
		  
		  Dim OurVersionMajor as String = inCurrentRunningVersion.NthField(".",1)
		  Dim OurVersionMinor as String = inCurrentRunningVersion.NthField(".",2)
		  Dim OurVersionBugVer as String = inCurrentRunningVersion.NthField(".",3)
		  Dim OurVersionString as String = OurVersionMajor+OurVersionMinor+OurVersionBugVer
		  Dim OurVersionInt as Integer =  CDbl(OurVersionString)
		  
		  
		  if  OurVersionInt = AvailableVersionInt Then
		    // We are Up To Date
		    Return "No upgrade needed"
		    
		  Elseif OurVersionInt < AvailableVersionInt Then
		    // Need an Upgrade
		    Return  "Needs upgrade"
		    
		  Elseif OurVersionInt > AvailableVersionInt Then
		    // Our Version is Higher than Available Version
		    Return "Local version higher than server version"
		  End if
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fConvertToFinalDestinationFilename(InputString as String) As String
		  // Take Filename and add \ to the spaces for BSD CLI formatting
		  // Need:   Intelligent\ Subnet\ Calculator.app
		  Dim FinalString as String
		  
		  Dim FormatFirstWord_RegEx as RegEx
		  Dim FormatFirstWord_RegExMatch as RegExMatch
		  Dim FormatFirstWord_Value as String
		  FormatFirstWord_RegEx = New RegEx
		  FormatFirstWord_RegEx.Options.Greedy = False
		  FormatFirstWord_RegEx.Options.caseSensitive = false
		  FormatFirstWord_RegEx.SearchPattern = "(Intelligent)"
		  FormatFirstWord_RegExMatch = FormatFirstWord_RegEx.Search(InputString)
		  if FormatFirstWord_RegExMatch <> nil then
		    FormatFirstWord_Value = FormatFirstWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim FormatSecondWord_RegEx as RegEx
		  Dim FormatSecondWord_RegExMatch as RegExMatch
		  Dim FormatSecondWord_Value as String
		  FormatSecondWord_RegEx = New RegEx
		  FormatSecondWord_RegEx.Options.Greedy = False
		  FormatSecondWord_RegEx.Options.caseSensitive = false
		  FormatSecondWord_RegEx.SearchPattern = "(Subnet)"
		  FormatSecondWord_RegExMatch = FormatSecondWord_RegEx.Search(InputString)
		  if FormatSecondWord_RegExMatch <> nil then
		    FormatSecondWord_Value = FormatSecondWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim FormatThirdWord_RegEx as RegEx
		  Dim FormatThirdWord_RegExMatch as RegExMatch
		  Dim FormatThirdWord_Value as String
		  FormatThirdWord_RegEx = New RegEx
		  FormatThirdWord_RegEx.Options.Greedy = False
		  FormatThirdWord_RegEx.Options.caseSensitive = false
		  FormatThirdWord_RegEx.SearchPattern = "(Calculator)"
		  FormatThirdWord_RegExMatch = FormatThirdWord_RegEx.Search(InputString)
		  if FormatThirdWord_RegExMatch <> nil then
		    FormatThirdWord_Value = FormatThirdWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  FinalString = FormatFirstWord_Value+"\ "+FormatSecondWord_Value+"\ "+FormatThirdWord_Value+".app/"
		  
		  Return FinalString
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fConvertToFinalSourceFilename(InputString as String) As String
		  // Take Filename and add \ to the spaces for BSD CLI formatting
		  // Need:   Intelligent\ Subnet\ Calculator-1.1.3.app
		  Dim FinalString as String
		  
		  Dim FormatFirstWord_RegEx as RegEx
		  Dim FormatFirstWord_RegExMatch as RegExMatch
		  Dim FormatFirstWord_Value as String
		  FormatFirstWord_RegEx = New RegEx
		  FormatFirstWord_RegEx.Options.Greedy = False
		  FormatFirstWord_RegEx.Options.caseSensitive = false
		  FormatFirstWord_RegEx.SearchPattern = "(Intelligent)"
		  FormatFirstWord_RegExMatch = FormatFirstWord_RegEx.Search(InputString)
		  if FormatFirstWord_RegExMatch <> nil then
		    FormatFirstWord_Value = FormatFirstWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim FormatSecondWord_RegEx as RegEx
		  Dim FormatSecondWord_RegExMatch as RegExMatch
		  Dim FormatSecondWord_Value as String
		  FormatSecondWord_RegEx = New RegEx
		  FormatSecondWord_RegEx.Options.Greedy = False
		  FormatSecondWord_RegEx.Options.caseSensitive = false
		  FormatSecondWord_RegEx.SearchPattern = "(Subnet)"
		  FormatSecondWord_RegExMatch = FormatSecondWord_RegEx.Search(InputString)
		  if FormatSecondWord_RegExMatch <> nil then
		    FormatSecondWord_Value = FormatSecondWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim FormatThirdWord_RegEx as RegEx
		  Dim FormatThirdWord_RegExMatch as RegExMatch
		  Dim FormatThirdWord_Value as String
		  FormatThirdWord_RegEx = New RegEx
		  FormatThirdWord_RegEx.Options.Greedy = False
		  FormatThirdWord_RegEx.Options.caseSensitive = false
		  FormatThirdWord_RegEx.SearchPattern = "(Calculator)"
		  FormatThirdWord_RegExMatch = FormatThirdWord_RegEx.Search(InputString)
		  if FormatThirdWord_RegExMatch <> nil then
		    FormatThirdWord_Value = FormatThirdWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Dim FormatFourthWord_RegEx as RegEx
		  Dim FormatFourthWord_RegExMatch as RegExMatch
		  Dim FormatFourthWord_Value as String
		  FormatFourthWord_RegEx = New RegEx
		  FormatFourthWord_RegEx.Options.Greedy = False
		  FormatFourthWord_RegEx.Options.caseSensitive = false
		  FormatFourthWord_RegEx.SearchPattern = "(?<=IntelligentSubnetCalculator).+(?=[.]app)"
		  FormatFourthWord_RegExMatch = FormatFourthWord_RegEx.Search(InputString)
		  if FormatFourthWord_RegExMatch <> nil then
		    FormatFourthWord_Value = FormatFourthWord_RegExMatch.SubExpressionString(0)
		  end if
		  
		  FinalString = FormatFirstWord_Value+"\ "+FormatSecondWord_Value+"\ "+FormatThirdWord_Value+FormatFourthWord_Value+".app/"
		  
		  Return FinalString
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fGetCurrentVersion() As String
		  // Set Basic HTTP Headers
		  Dim CurrentAvailableVersionXML as String
		  GetVersionHTTP = New GetVersion_HTTP
		  GetVersionHTTP.SetRequestHeader("Accept-Encoding:","gzip,deflate")
		  GetVersionHTTP.SetRequestHeader("User-Agent:","Jakarta Commons-HttpClient/3.1")
		  GetVersionHTTP.Yield = True
		  // Get Updated Version information from WebSite by Platform
		  #IF TargetWin32 Then
		    CurrentAvailableVersionXML = GetVersionHTTP.Get ("http://www.intelligentsubnetcalculator.com/calculator_versioncheck.php?os=win",10)
		  #Elseif TargetMacOS Then
		    CurrentAvailableVersionXML = GetVersionHTTP.Get ("http://www.intelligentsubnetcalculator.com/calculator_versioncheck.php?os=osx",10)
		  #Endif
		  //
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  // Error Checks for Network Failure AND HTTP Response of Nothing //
		  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  if GetVersionHTTP.LastErrorCode <> 0 Then
		    // Error 103: Netork Connection to IP Address or Hostname Failed
		    MsgBox "Connection Failure!" + EndOfLine + EndOfLine + "Connection to the Intelligent Subnet Calculator Update Server has failed due to network connectivity issues. " + EndOfLine + EndOfLine + "Please check your network connection and try again."
		    Exit Function
		  Elseif CurrentAvailableVersionXML = "" Then
		    // Our Server returned no Data.. Possible network latency issues (network is up but super super slow)
		    MsgBox "Connection timed out!" + EndOfLine + EndOfLine + "Connection to the Intelligent Subnet Calculator Update Server has timed out. " + EndOfLine + EndOfLine + "Please check your network connectivity and try again."
		    Exit Function
		  End if
		  
		  // Write Date Last Checked to Preference File
		  App.Preferences.mWriteGeneral_Preferences("DateLastCheckedForVersion",DateLastChecked)
		  App.Preferences.DateLastCheckedForVerUpgradeString = DateLastChecked
		  // Parse XML Results for Available Version from WebSite
		  CurrentAvailableVersion = fParseXML_VersionResults(CurrentAvailableVersionXML)
		  
		  // Parse XML Results for Download Message From the Server
		  CurrentDownloadMesssage = fParseXML_DownloadMessage(CurrentAvailableVersionXML)
		  // Parse XML Results for Available Version Download Link for Users in Manual Install mode
		  CurrentAvailableUserDownloadLink = fParseXML_DownloadUserLinkResults(CurrentAvailableVersionXML)
		  // Parse XML Results for Available Version Download Link for our Code in Auto Install mode
		  CurrentAvailableCodeDownloadLink = fParseXML_DownloadCodeLinkResults(CurrentAvailableVersionXML)
		  
		  // Calculate if we need to upgrade or not - True = Needs Upgrade, False = No Upgrade
		  Dim NeedVersionUpgrade as String = fCompareVersions(CurrentAvailableVersion,CurrentRunningVersion)
		  
		  // Check Status of Compare
		  if NeedVersionUpgrade = "No upgrade needed" OR NeedVersionUpgrade = "Local version higher than server version" Then
		    // No Upgrade Needed since both versions match
		    // If we are Manual then Pop Manual Up To Date Window
		    if App.Preferences.AutoInstall = False Then
		      ManualDontNeedVersionUpgradeNotificationWindow.Show
		    End if
		    
		  Else
		    // We need to upgrade
		    // Now check for Auto Install Preference or Manual INstall
		    if App.Preferences.AutoInstall = False Then
		      // Manual Installation
		      ManualNeedVersionUpgradeNotificationWindow.Show
		    End if
		  End if
		  
		  Return NeedVersionUpgrade
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseXML_DownloadCodeLinkResults(XMLString as String) As String
		  // XML Format Expected
		  // <response>
		  // <current_version>1.1.3</current_version>
		  // <message>New version is available, please upgrade</message>
		  // <url>
		  // http://www.syntheticdreams.org/calculator/index.html#about
		  // </url>
		  // <download_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.dmg
		  // </download_url>
		  // <auto_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.app.tar.gz
		  // </auto_url>
		  // </response>
		  
		  // Load General Preferences: Appearance Style
		  Dim ParseXMLCodeDownloadLink_RegEx as RegEx
		  Dim ParseXMLCodeDownloadLink_RegExMatch as RegExMatch
		  Dim ParseXMLCodeDownloadLink_Value as String
		  ParseXMLCodeDownloadLink_RegEx = New RegEx
		  ParseXMLCodeDownloadLink_RegEx.Options.Greedy = False
		  ParseXMLCodeDownloadLink_RegEx.Options.caseSensitive = false
		  ParseXMLCodeDownloadLink_RegEx.SearchPattern = "(?<=<auto_url>).+(?=</auto_url>)"
		  ParseXMLCodeDownloadLink_RegExMatch = ParseXMLCodeDownloadLink_RegEx.Search(XMLString)
		  if ParseXMLCodeDownloadLink_RegExMatch <> nil then
		    ParseXMLCodeDownloadLink_Value = ParseXMLCodeDownloadLink_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseXMLCodeDownloadLink_Value
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseXML_DownloadMessage(XMLString as String) As String
		  // XML Format Expected
		  // <response>
		  // <current_version>1.1.3</current_version>
		  // <message>New version is available, please upgrade</message>
		  // <url>
		  // http://www.syntheticdreams.org/calculator/index.html#about
		  // </url>
		  // <download_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.dmg
		  // </download_url>
		  // <auto_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.app.tar.gz
		  // </auto_url>
		  // </response>
		  
		  // Load General Preferences: Appearance Style
		  Dim ParseXMLDownloadMessage_RegEx as RegEx
		  Dim ParseXMLDownloadMessage_RegExMatch as RegExMatch
		  Dim ParseXMLDownloadMessage_Value as String
		  ParseXMLDownloadMessage_RegEx = New RegEx
		  ParseXMLDownloadMessage_RegEx.Options.Greedy = False
		  ParseXMLDownloadMessage_RegEx.Options.caseSensitive = false
		  ParseXMLDownloadMessage_RegEx.SearchPattern = "(?<=<message>).+(?=</message>)"
		  ParseXMLDownloadMessage_RegExMatch = ParseXMLDownloadMessage_RegEx.Search(XMLString)
		  if ParseXMLDownloadMessage_RegExMatch <> nil then
		    ParseXMLDownloadMessage_Value = ParseXMLDownloadMessage_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseXMLDownloadMessage_Value
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseXML_DownloadUserLinkResults(XMLString as String) As String
		  // XML Format Expected
		  // <response>
		  // <current_version>1.1.3</current_version>
		  // <message>New version is available, please upgrade</message>
		  // <url>
		  // http://www.syntheticdreams.org/calculator/index.html#about
		  // </url>
		  // <download_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.dmg
		  // </download_url>
		  // <auto_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.app.tar.gz
		  // </auto_url>
		  // </response>
		  
		  // Load General Preferences: Appearance Style
		  Dim ParseXMLDownloadLink_RegEx as RegEx
		  Dim ParseXMLDownloadLink_RegExMatch as RegExMatch
		  Dim ParseXMLDownloadLink_Value as String
		  ParseXMLDownloadLink_RegEx = New RegEx
		  ParseXMLDownloadLink_RegEx.Options.Greedy = False
		  ParseXMLDownloadLink_RegEx.Options.caseSensitive = false
		  ParseXMLDownloadLink_RegEx.SearchPattern = "(?<=<download_url>).+(?=</download_url>)"
		  ParseXMLDownloadLink_RegExMatch = ParseXMLDownloadLink_RegEx.Search(XMLString)
		  if ParseXMLDownloadLink_RegExMatch <> nil then
		    ParseXMLDownloadLink_Value = ParseXMLDownloadLink_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseXMLDownloadLink_Value
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function fParseXML_VersionResults(XMLString as String) As String
		  // XML Format Expected
		  // <response>
		  // <current_version>1.1.3</current_version>
		  // <message>New version is available, please upgrade</message>
		  // <url>
		  // http://www.syntheticdreams.org/calculator/index.html#about
		  // </url>
		  // <download_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.dmg
		  // </download_url>
		  // <auto_url>
		  // http://www.syntheticdreams.org/calculator/IntelligentSubnetCalculator-1.1.3.app.tar.gz
		  // </auto_url>
		  // </response>
		  
		  // Load General Preferences: Appearance Style
		  Dim ParseXMLVersion_RegEx as RegEx
		  Dim ParseXMLVersion_RegExMatch as RegExMatch
		  Dim ParseXMLVersion_Value as String
		  ParseXMLVersion_RegEx = New RegEx
		  ParseXMLVersion_RegEx.Options.Greedy = False
		  ParseXMLVersion_RegEx.Options.caseSensitive = false
		  ParseXMLVersion_RegEx.SearchPattern = "(?<=<current_version>).+(?=</current_version)"
		  ParseXMLVersion_RegExMatch = ParseXMLVersion_RegEx.Search(XMLString)
		  if ParseXMLVersion_RegExMatch <> nil then
		    ParseXMLVersion_Value = ParseXMLVersion_RegExMatch.SubExpressionString(0)
		  end if
		  
		  Return ParseXMLVersion_Value
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fThisAppsVersion() As String
		  Dim RunningVersion as String
		  // format 1.1.2.b23
		  RunningVersion = app.VersionRelease
		  Return RunningVersion
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub mAutoInstallation()
		  // Automatically download file to ~user/Downloads folder
		  // Auto shell cp -r to ~user/Applications
		  // Notify user to Restart to Upgrade :)
		  // #Mac/Linux Targets
		  // Format http://www.intelligentsubnetcalculator.com/calculator/IntelligentSubnetCalculator-1.1.3.app.tar.gz
		  
		  Dim SourceFolder as FolderItem
		  Dim Filename as String
		  Filename = "IntelligentSubnetCalculator-"+CurrentAvailableVersion+".app.tar.gz"
		  
		  SourceFolder = SpecialFolder.UserHome.Child(Filename)
		  
		  HTTPGetUpgradeFile = New HTTP_GetUpgradeFile
		  HTTPGetUpgradeFile.SetRequestContent("Accept:","text/html,application/xhtml+xml,application/xml")
		  HTTPGetUpgradeFile.SetRequestContent("Accept-Language:","en-US")
		  HTTPGetUpgradeFile.SetRequestHeader("Accept-Encoding:","gzip,deflate,sdch")
		  HTTPGetUpgradeFile.SetRequestHeader("User-Agent:","Mozilla/5.0")
		  
		  // Kick Off Main Window Pop Up Notification Update Status Progress Bar
		  MainWindow.AutoInstallProgressBar_StatusUpdateTimer1.period = 1000
		  MainWindow.AutoInstallProgressBar_StatusUpdateTimer1.Mode = timer.ModeMultiple
		  
		  //AutoIntall_DownloadStatus = HTTPGetUpgradeFile.Get(CurrentAvailableUserDownloadLink + Filename, SourceFolder,140)
		  //HTTPGetUpgradeFile.Get("http://www.intelligentsubnetcalculator.com/calculator/IntelligentSubnetCalculator-1.1.8.app.tar.gz",SourceFolder)
		  HTTPGetUpgradeFile.Get(CurrentAvailableUserDownloadLink,SourceFolder)
		  
		  // HTTPGetUpgradeFile.Error Event: Error and Failure Reaction
		  // HTTPGetUpgradeFile.ReceiveProgress Event: Set progress bar status with it and also provide popups and beeps when download is done
		  
		  // Set Folderitem var for Destination Applications Folder
		  Dim ApplicationFolderLocation as FolderItem
		  ApplicationFolderLocation=SpecialFolder.Applications
		  
		  // Copy Downloaded File to the Applications Folder
		  Dim TarShell as new Shell
		  Dim CopyCP as New Shell
		  
		  // Unpack New Downloaded TarBall
		  TarShell.Execute("tar -xzvf $HOME/"+SourceFolder.DisplayName+ " -C $HOME/") // Filename
		  // Now an .app Folder
		  
		  Dim LenOfNewAppFolder as Integer = SourceFolder.DisplayName.Len-7 // Get New App Name without .tar.gz
		  Dim NativeSourceAppDestination as String = SourceFolder.DisplayName.Left(LenOfNewAppFolder)
		  
		  // Convert Destination Filename into the proper CLI BSD format for CP
		  Dim Final_Destination_Filename as String = fConvertToFinalDestinationFilename(NativeSourceAppDestination)
		  
		  // Convert Source Downloaded Filename into the proper CLI BSD Format for CP
		  Dim Final_Source_Filename as String = fConvertToFinalSourceFilename(NativeSourceAppDestination)
		  
		  // Perform Copy of New Downloaded File to the user's Applications Directory
		  CopyCP.Execute("cp -r $HOME/"+Final_Source_Filename + " /Applications/"+Final_Destination_Filename)
		  
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub mManuallyLaunchUpdate()
		  MainWindow.App_Notification_AutoInstallComplete.Visible = False
		  Dim CheckForNewVersionManually as String = VersionCheck.fGetCurrentVersion
		  Exit Sub
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		AutoInstallProgressBarBytesReceived As integer
	#tag EndProperty

	#tag Property, Flags = &h0
		AutoInstallProgressBarStatusPercentage As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		AutoInstallProgressBarTotalBytes As integer
	#tag EndProperty

	#tag Property, Flags = &h0
		AutoIntall_DownloadStatus As Boolean
	#tag EndProperty

	#tag Property, Flags = &h0
		CurrentAvailableCodeDownloadLink As String
	#tag EndProperty

	#tag Property, Flags = &h0
		CurrentAvailableUserDownloadLink As String
	#tag EndProperty

	#tag Property, Flags = &h0
		CurrentAvailableVersion As String
	#tag EndProperty

	#tag Property, Flags = &h0
		CurrentDownloadMesssage As String
	#tag EndProperty

	#tag Property, Flags = &h0
		CurrentRunningVersion As String
	#tag EndProperty

	#tag Property, Flags = &h0
		DailyUpgradeCheck_Fire As Boolean = False
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Dim TodaysDate as New Date
			  Preferences_Window.SoftwareSettings_Container1.DateVersionLastChecked_Datalabel.Text = TodaysDate.ShortDate
			  Return TodaysDate.ShortDate
			End Get
		#tag EndGetter
		DateLastChecked As String
	#tag EndComputedProperty

	#tag Property, Flags = &h0
		GetVersionHTTP As GetVersion_HTTP
	#tag EndProperty

	#tag Property, Flags = &h0
		HTTPGetUpgradeFile As HTTP_GetUpgradeFile
	#tag EndProperty

	#tag Property, Flags = &h0
		RunAutoInstallThread As AutoInstallThread
	#tag EndProperty

	#tag Property, Flags = &h0
		UpgradeStatusString As String
	#tag EndProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="AutoInstallProgressBarBytesReceived"
			Group="Behavior"
			Type="integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AutoInstallProgressBarStatusPercentage"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AutoInstallProgressBarTotalBytes"
			Group="Behavior"
			Type="integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AutoIntall_DownloadStatus"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CurrentAvailableCodeDownloadLink"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CurrentAvailableUserDownloadLink"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CurrentAvailableVersion"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CurrentDownloadMesssage"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="CurrentRunningVersion"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="DailyUpgradeCheck_Fire"
			Group="Behavior"
			InitialValue="False"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="DateLastChecked"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="UpgradeStatusString"
			Group="Behavior"
			Type="String"
			EditorType="MultiLineEditor"
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule
