#tag Class
Protected Class Receive_ACLClass
	#tag Method, Flags = &h0
		Function fParseExtendedGlobalACLConfig(inACLArray() as String) As String()
		  Dim ParseGlobalExtendedACLConfig_RegEx as RegEx
		  Dim ParseGlobalExtendedACLConfig_RegExMatch as RegExMatch
		  Dim ParseGlobalExtendedACLConfig_HitText as String
		  Dim ParsedGlobalExtendedACL_Array() as String
		  ParseGlobalExtendedACLConfig_RegEx = New RegEx
		  ParseGlobalExtendedACLConfig_RegEx.Options.Greedy = True
		  ParseGlobalExtendedACLConfig_RegEx.Options.CaseSensitive = False
		  ParseGlobalExtendedACLConfig_RegEx.Options.DotMatchAll = False
		  ParseGlobalExtendedACLConfig_RegEx.Options.MatchEmpty = True
		  ParseGlobalExtendedACLConfig_RegEx.Options.StringBeginIsLineBegin = True
		  ParseGlobalExtendedACLConfig_RegEx.Options.StringEndIsLineEnd = True
		  ParseGlobalExtendedACLConfig_RegEx.Options.TreatTargetAsOneLine = True
		  ParseGlobalExtendedACLConfig_RegEx.SearchPattern = "access-list\s1[3-9][0-9][0-9]\b.+\b|access-list\s2[0-6][0-9][0-9]\b.+\b|access-list\s1[0-9][0-9]\b.+\b"
		  for i as integer = 0 to UBound(inACLArray)
		    ParseGlobalExtendedACLConfig_RegExMatch = ParseGlobalExtendedACLConfig_RegEx.Search(inACLArray(i))
		    
		    if ParseGlobalExtendedACLConfig_RegExMatch <> nil then
		      ParseGlobalExtendedACLConfig_HitText = ParseGlobalExtendedACLConfig_RegExMatch.SubExpressionString(0)
		      ParsedGlobalExtendedACL_Array.Append ParseGlobalExtendedACLConfig_HitText + EndOfLine
		    end if
		  next i
		  
		  return ParsedGlobalExtendedACL_Array
		  
		  
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fParseReceivedACL(InReceivedACLString as String, inACL_Type as String) As string()
		  // Replace All Line endings with our System's Line Endings
		  // Convert Encoding to UTF-8
		  // Split into an array
		  Dim ReceivedACL_Array() as String = Split(ReplaceLineEndings(DefineEncoding(InReceivedACLString,Encodings.UTF8), EndOfLine), EndOfLine)
		  
		  // Depending on Which Window the File Was Dropped will dictate Standard or Extended
		  if inACL_Type = "Standard" Then
		    // Use Regular Expressions to Parse out Just the Global Access-list configurations
		    Dim ParsedStandardGlobalACLConfig() as String = fParseStandardGlobalACLConfig(ReceivedACL_Array)
		    Return ParsedStandardGlobalACLConfig
		    
		  Elseif inACL_Type = "Extended" Then
		    Dim ParsedExtendedGlobalACLConfig() as String = fParseExtendedGlobalACLConfig(ReceivedACL_Array)
		    Return ParsedExtendedGlobalACLConfig
		  End if
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Function fParseStandardGlobalACLConfig(inACLArray() as String) As String()
		  // Look for IOS Standard ACL Entries
		  Dim ParseGlobalStandardACLConfig_RegEx as RegEx
		  Dim ParseGlobalStandardACLConfig_RegExMatch as RegExMatch
		  Dim ParseGlobalStandardACLConfig_HitText as String
		  Dim ParsedGlobalStandardACL_Array() as String
		  ParseGlobalStandardACLConfig_RegEx = New RegEx
		  ParseGlobalStandardACLConfig_RegEx.Options.Greedy = True
		  ParseGlobalStandardACLConfig_RegEx.Options.caseSensitive = False
		  ParseGlobalStandardACLConfig_RegEx.SearchPattern = "(^access-list\s)([0-9][0-9])\b.+|(^access-list\s)([0-9])\b.+"
		  
		  for i as integer = 0 to UBound(inACLArray)
		    ParseGlobalStandardACLConfig_RegExMatch = ParseGlobalStandardACLConfig_RegEx.Search(inACLArray(i))
		    
		    if ParseGlobalStandardACLConfig_RegExMatch <> nil then
		      ParseGlobalStandardACLConfig_HitText = ParseGlobalStandardACLConfig_RegExMatch.SubExpressionString(0)
		      ParsedGlobalStandardACL_Array.Append ParseGlobalStandardACLConfig_HitText + EndOfLine
		    end if
		  next i
		  
		  
		  Return ParsedGlobalStandardACL_Array
		  
		  
		  
		  
		End Function
	#tag EndMethod


	#tag ViewBehavior
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
